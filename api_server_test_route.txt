@app.route('/test')
def test_page():
    '''Interactive testing page with auto-generate tags'''
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test Insurance Classifier</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                padding: 40px;
            }
            h1 { color: #667eea; margin-bottom: 30px; }
            .form-group {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                color: #374151;
                font-weight: 600;
            }
            input, textarea {
                width: 100%;
                padding: 12px;
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.3s;
            }
            input:focus, textarea:focus {
                outline: none;
                border-color: #667eea;
            }
            textarea { resize: vertical; min-height: 80px; }
            .btn-group {
                display: flex;
                gap: 10px;
                margin-bottom: 20px;
            }
            button {
                flex: 1;
                background: #667eea;
                color: white;
                padding: 15px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s;
            }
            button:hover {
                background: #5568d3;
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }
            button:disabled {
                background: #9ca3af;
                cursor: not-allowed;
                transform: none;
            }
            .btn-secondary {
                background: #10b981;
            }
            .btn-secondary:hover {
                background: #059669;
            }
            #result {
                margin-top: 30px;
                padding: 25px;
                background: #f9fafb;
                border-radius: 10px;
                display: none;
            }
            .result-header {
                font-size: 1.5em;
                margin-bottom: 15px;
                color: #10b981;
            }
            .result-item {
                margin: 10px 0;
                padding: 10px;
                background: white;
                border-radius: 5px;
            }
            .result-label {
                font-weight: 600;
                color: #6b7280;
            }
            .result-value {
                color: #1f2937;
                margin-top: 5px;
            }
            .confidence-high { color: #10b981; font-weight: bold; }
            .confidence-medium { color: #f59e0b; font-weight: bold; }
            .confidence-low { color: #ef4444; font-weight: bold; }
            .insurance-yes {
                background: #d1fae5;
                border-left: 4px solid #10b981;
                padding: 15px;
                margin: 15px 0;
                border-radius: 5px;
            }
            .insurance-no {
                background: #fee2e2;
                border-left: 4px solid #ef4444;
                padding: 15px;
                margin: 15px 0;
                border-radius: 5px;
            }
            .loading {
                text-align: center;
                padding: 20px;
                color: #667eea;
            }
            .hint {
                font-size: 0.9em;
                color: #6b7280;
                margin-top: 5px;
            }
            .tag-badge {
                display: inline-block;
                background: #e0e7ff;
                color: #4f46e5;
                padding: 4px 12px;
                border-radius: 12px;
                margin: 2px;
                font-size: 0.85em;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🧪 Test Insurance Classifier</h1>
            
            <div class="form-group">
                <label for="title">Product Title *</label>
                <input type="text" id="title" placeholder="e.g., Cricket Bat" onchange="updateTags()" />
            </div>
            
            <div class="form-group">
                <label for="description">Description (optional)</label>
                <textarea id="description" rows="3" placeholder="e.g., Professional cricket bat made from willow" onchange="updateTags()"></textarea>
            </div>
            
            <div class="form-group">
                <label for="vendor">Brand/Vendor (optional)</label>
                <input type="text" id="vendor" placeholder="e.g., Ceat" onchange="updateTags()" />
            </div>
            
            <div class="form-group">
                <label for="tags">Tags (🔥 Boosts Confidence Score!) *</label>
                <textarea id="tags" rows="2" placeholder="e.g., cricket, bat, sports equipment, batting"></textarea>
                <div class="hint">💡 Tip: Good tags can increase confidence by 20-30%! Auto-generated from title above.</div>
            </div>
            
            <div class="form-group">
                <label for="price">Price (optional)</label>
                <input type="number" id="price" placeholder="e.g., 999.99" step="0.01" />
            </div>
            
            <div class="btn-group">
                <button onclick="autoGenerateTags()" class="btn-secondary">🏷️ Auto-Generate Tags</button>
                <button onclick="classify()" id="classifyBtn">🔍 Classify Product</button>
            </div>
            
            <div id="result"></div>
        </div>
        
        <script>
        // Auto-update tags when title changes
        function updateTags() {
            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;
            const vendor = document.getElementById('vendor').value;
            const tagsField = document.getElementById('tags');
            
            // Only auto-generate if tags field is empty
            if (!tagsField.value.trim() && title) {
                autoGenerateTags();
            }
        }
        
        // Auto-generate tags from title and description
        function autoGenerateTags() {
            const title = document.getElementById('title').value.toLowerCase();
            const description = document.getElementById('description').value.toLowerCase();
            const vendor = document.getElementById('vendor').value.toLowerCase();
            
            if (!title) {
                alert('Please enter a product title first');
                return;
            }
            
            const allText = title + ' ' + description + ' ' + vendor;
            
            // Extract meaningful words
            const words = allText.match(/\b\w+\b/g) || [];
            
            // Common stop words to exclude
            const stopWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'from', 'as', 'is', 'was', 'are', 'been', 'be', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should']);
            
            // Category keywords to prioritize
            const categoryKeywords = {
                'appliances': ['dishwasher', 'refrigerator', 'oven', 'microwave', 'washer', 'dryer', 'appliance'],
                'electronics': ['phone', 'laptop', 'computer', 'tablet', 'tv', 'television', 'camera', 'headphone', 'speaker'],
                'sports': ['cricket', 'bat', 'football', 'tennis', 'basketball', 'sports', 'fitness', 'exercise'],
                'gaming': ['xbox', 'playstation', 'nintendo', 'gaming', 'console', 'game'],
                'automotive': ['car', 'motorcycle', 'tire', 'battery', 'parts', 'automotive'],
                'kitchen': ['kitchen', 'cooking', 'chef', 'utensil', 'cookware']
            };
            
            let tags = new Set();
            
            // Add main words from title (most important)
            title.split(/\s+/).forEach(word => {
                word = word.replace(/[^a-z0-9]/g, '');
                if (word.length > 2 && !stopWords.has(word)) {
                    tags.add(word);
                }
            });
            
            // Add vendor if present
            if (vendor) {
                tags.add(vendor);
            }
            
            // Add category keywords found in text
            for (const [category, keywords] of Object.entries(categoryKeywords)) {
                for (const keyword of keywords) {
                    if (allText.includes(keyword)) {
                        tags.add(category);
                        tags.add(keyword);
                    }
                }
            }
            
            // Add product type combinations
            if (allText.includes('cricket') && allText.includes('bat')) {
                tags.add('cricket bat');
                tags.add('batting equipment');
                tags.add('team sports');
            }
            if (allText.includes('dishwasher')) {
                tags.add('kitchen appliances');
                tags.add('appliances');
            }
            if (allText.includes('phone') || allText.includes('smartphone')) {
                tags.add('mobile phone');
                tags.add('communication device');
                tags.add('electronics');
            }
            
            // Convert to array and join
            const tagArray = Array.from(tags).slice(0, 15); // Limit to 15 tags
            document.getElementById('tags').value = tagArray.join(', ');
            
            // Visual feedback
            const tagsField = document.getElementById('tags');
            tagsField.style.borderColor = '#10b981';
            setTimeout(() => {
                tagsField.style.borderColor = '#e5e7eb';
            }, 1000);
        }
        
        async function classify() {
            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;
            const vendor = document.getElementById('vendor').value;
            const tags = document.getElementById('tags').value;
            const price = parseFloat(document.getElementById('price').value) || 0;
            
            if (!title) {
                alert('Please enter a product title');
                return;
            }
            
            const btn = document.getElementById('classifyBtn');
            const resultDiv = document.getElementById('result');
            
            btn.disabled = true;
            btn.textContent = '⏳ Classifying...';
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = '<div class="loading">⏳ Processing...</div>';
            
            try {
                const response = await fetch('/api/classify', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({title, description, vendor, tags, price})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const r = data.result;
                    let html = '<div class="result-header">✅ Classification Result</div>';
                    
                    html += '<div class="result-item">';
                    html += '<div class="result-label">Product</div>';
                    html += '<div class="result-value">' + title + '</div>';
                    html += '</div>';
                    
                    html += '<div class="result-item">';
                    html += '<div class="result-label">Category ID</div>';
                    html += '<div class="result-value"><strong>' + r.category_id + '</strong></div>';
                    html += '</div>';
                    
                    html += '<div class="result-item">';
                    html += '<div class="result-label">Category</div>';
                    html += '<div class="result-value">' + r.category_path + '</div>';
                    html += '</div>';
                    
                    html += '<div class="result-item">';
                    html += '<div class="result-label">Confidence</div>';
                    html += '<div class="result-value confidence-' + r.confidence + '">';
                    html += r.confidence.toUpperCase() + ' (' + r.similarity.toFixed(4) + ')';
                    html += '</div>';
                    html += '</div>';
                    
                    html += '<div class="result-item">';
                    html += '<div class="result-label">Details</div>';
                    html += '<div class="result-value">';
                    html += 'Depth: ' + r.depth + ' levels | ';
                    html += 'Method: ' + r.prediction_method + ' | ';
                    html += 'Time: ' + r.processing_time_ms + 'ms';
                    html += '</div>';
                    html += '</div>';
                    
                    if (tags) {
                        html += '<div class="result-item">';
                        html += '<div class="result-label">Tags Used (3X Weight!)</div>';
                        html += '<div class="result-value">';
                        tags.split(',').forEach(tag => {
                            html += '<span class="tag-badge">' + tag.trim() + '</span>';
                        });
                        html += '</div>';
                        html += '</div>';
                    }
                    
                    if (r.insurance.eligible) {
                        html += '<div class="insurance-yes">';
                        html += '<strong>🛡️ Insurance Available</strong><br>';
                        html += 'Monthly Premium: $' + r.insurance.monthly_premium + '<br>';
                        html += 'Coverage Period: ' + r.insurance.coverage_period_months + ' months<br>';
                        html += 'Total Cost: $' + r.insurance.total_coverage;
                        html += '</div>';
                    } else {
                        html += '<div class="insurance-no">';
                        html += '<strong>❌ Insurance Not Available</strong><br>';
                        if (r.confidence === 'low' || r.confidence === 'very_low') {
                            html += 'Reason: Low confidence. Try adding more descriptive tags!';
                        } else if (price <= 50) {
                            html += 'Reason: Product price too low (must be > )';
                        }
                        html += '</div>';
                    }
                    
                    resultDiv.innerHTML = html;
                } else {
                    resultDiv.innerHTML = '<div class="result-header" style="color: #ef4444;">❌ Error</div>';
                    resultDiv.innerHTML += '<div class="result-item">' + data.error + '</div>';
                }
            } catch (error) {
                resultDiv.innerHTML = '<div class="result-header" style="color: #ef4444;">❌ Error</div>';
                resultDiv.innerHTML += '<div class="result-item">' + error + '</div>';
            } finally {
                btn.disabled = false;
                btn.textContent = '🔍 Classify Product';
            }
        }
        
        // Allow Enter key to submit
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && e.ctrlKey) {
                classify();
            }
        });
        
        // Auto-generate tags when page loads if example data is present
        window.onload = function() {
            // Optional: Pre-fill example
            // document.getElementById('title').value = 'Cricket Bat';
            // updateTags();
        };
        </script>
    </body>
    </html>
    '''
